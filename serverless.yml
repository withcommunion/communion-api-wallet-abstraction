service: communion-wallet-abstraction
configValidationMode: error

provider:
  name: aws
  deploymentMethod: direct
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  stackName: ${sls:stage}-${self:service}
  apiName: ${sls:stage}-${self:service}
  memorySize: 512
  deploymentPrefix: serverless
  versionFunctions: true
  logRetentionInDays: 30
  # http-api docs https://www.serverless.com/framework/docs/providers/aws/events/http-api
  # TODO View docs - we will want to make it only accept from our domain
  httpApi:
    cors: true
    authorizers:
      cognitoJwtAuthorizer-dev:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_EXRZZF0cp
        audience:
          # TODO: Figure out the implications of this, is clientId proper?
          - 4eerlu1taf72c8r20pv2tmmvmt
      cognitoJwtAuthorizer-prod:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_SeeaUyuuH
        audience:
          # TODO: Figure out the implications of this, is clientId proper?
          - 66eoq77778g7d8e36v6pobj0b6
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:*'
          Resource:
            - Fn::GetAtt: [usersTable, Arn]

  environment:
    STAGE: ${sls:stage}
    LOG_LEVEL: info

plugins:
  - serverless-bundle

custom:
  bundle:
    packager: yarn
    # TODO: Figure out AWS-SDK v3 exclusion. https://aws.amazon.com/blogs/developer/modular-packages-in-aws-sdk-for-javascript/
    externals:
      - crypto
      - ethers
      - '@avalabs/avalanche-wallet-sdk'

functions:
  getSelf:
    name: getSelf-${sls:stage}
    handler: src/endpoints/api-get-self.handler
    events:
      # http-api docs https://www.serverless.com/framework/docs/providers/aws/events/http-api
      - httpApi:
          method: GET
          path: /user/self
          authorizer:
            name: cognitoJwtAuthorizer-${sls:stage}
  getSelfTxs:
    name: getSelfTxs-${sls:stage}
    handler: src/endpoints/api-get-self-txs.handler
    events:
      # http-api docs https://www.serverless.com/framework/docs/providers/aws/events/http-api
      - httpApi:
          method: GET
          path: /user/self/tx
          authorizer:
            name: cognitoJwtAuthorizer-${sls:stage}
  postSeedSelf:
    name: postSeedSelf-${sls:stage}
    handler: src/endpoints/api-post-seed-self.handler
    timeout: 30
    events:
      # http-api docs https://www.serverless.com/framework/docs/providers/aws/events/http-api
      - httpApi:
          method: POST
          path: /user/self/seed
          authorizer:
            name: cognitoJwtAuthorizer-${sls:stage}
  getOrganization:
    name: getOrganization-${sls:stage}
    handler: src/endpoints/api-get-organization.handler
    events:
      # http-api docs https://www.serverless.com/framework/docs/providers/aws/events/http-api
      - httpApi:
          method: GET
          path: /organization/{orgId}
          authorizer:
            name: cognitoJwtAuthorizer-${sls:stage}
  getOrgById:
    name: getOrgById-${sls:stage}
    handler: src/endpoints/api-get-org-by-id.handler
    events:
      # http-api docs https://www.serverless.com/framework/docs/providers/aws/events/http-api
      - httpApi:
          method: GET
          path: /org/{orgId}
          # authorizer:
          # name: cognitoJwtAuthorizer-${sls:stage}
  postConfirmationCreateUserWallet:
    name: postConfirmationCreateUserWallet-${sls:stage}
    handler: src/cognitoTriggers/post-confirmation-create-user-wallet.handler
    timeout: 5
    events:
      - cognitoUserPool:
          pool: communion-users-demo-${sls:stage}
          trigger: PostConfirmation
          existing: true
  newImageSeedUser:
    name: newImageSeedUser-${sls:stage}
    handler: src/dynamoTriggers/new-image-seed-user.handler
    timeout: 20
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [usersTable, StreamArn]

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable-${sls:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
        # https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_StreamSpecification.html
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    orgsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: orgsTable-${sls:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html
    cognitoCommunionUsersDemo:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: communion-users-demo-${sls:stage}
        UsernameAttributes:
          - email
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        AutoVerifiedAttributes:
          - email
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        Schema:
          - AttributeDataType: 'String'
            Name: 'family_name'
            Mutable: true
            Required: true
          - AttributeDataType: 'String'
            Name: 'given_name'
            Mutable: true
            Required: true
          - AttributeDataType: 'String'
            Name: 'organization'
            Mutable: true
          - AttributeDataType: 'String'
            Name: 'role'
            Mutable: true
        UsernameConfiguration:
          CaseSensitive: false
