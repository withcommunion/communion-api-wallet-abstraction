service: communion-wallet-abstraction
configValidationMode: error

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  stackName: ${sls:stage}-${self:service}
  apiName: ${sls:stage}-${self:service}
  memorySize: 512
  deploymentPrefix: serverless
  versionFunctions: true
  # http-api docs https://www.serverless.com/framework/docs/providers/aws/events/http-api
  # TODO View docs - we will want to make it only accept from our domain
  httpApi:
    cors: true
    authorizers:
      cognitoJwtAuthorizer-dev:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_EXRZZF0cp
        audience:
          # TODO: Figure out the implications of this, is clientId proper?
          - 4eerlu1taf72c8r20pv2tmmvmt
      cognitoJwtAuthorizer-prod:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_SeeaUyuuH
        audience:
          # TODO: Figure out the implications of this, is clientId proper?
          - 66eoq77778g7d8e36v6pobj0b6
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - Fn::GetAtt: [usersTable, Arn]
  environment:
    STAGE: ${sls:stage}

plugins:
  - serverless-bundle

custom:
  bundle:
    # TODO: Figure out AWS-SDK v3 exclusion. https://aws.amazon.com/blogs/developer/modular-packages-in-aws-sdk-for-javascript/
    externals:
      - crypto
      - ethers
      - '@avalabs/avalanche-wallet-sdk'

functions:
  getSelf:
    name: getSelf-${sls:stage}
    handler: src/endpoints/api-get-self.handler
    events:
      # http-api docs https://www.serverless.com/framework/docs/providers/aws/events/http-api
      - httpApi:
          method: GET
          path: /user/self
          authorizer:
            name: cognitoJwtAuthorizer-${sls:stage}
  createWallet: #TODO: We likely don't want this as an endpoint, instead use the lambda as a trigger on Cognito.
    name: createWallet-${sls:stage}
    handler: src/endpoints/api-create-wallet.handler
    events:
      # http-api docs https://www.serverless.com/framework/docs/providers/aws/events/http-api
      - httpApi:
          method: POST
          path: /wallet
  postConfirmationCreateUserWallet:
    name: postConfirmationCreateUserWallet-${sls:stage}
    handler: src/cognitoTriggers/post-confirmation-create-user-wallet.handler
    events:
      - cognitoUserPool:
          pool: communion-users-demo-${sls:stage}
          trigger: PostConfirmation
          existing: true

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: userTable-${sls:stage}
        # TODO: Make this a Range key + Sort key ordeal?  Can actually query by org or by org + id
        # TODO: Issue here is that a user may have more than one org
        # TODO: Query by just ID or ID + Org?  Yes
        # TODO: Current URN doesn't support a single query for all orgs of user.  Can scan though
        AttributeDefinitions:
          - AttributeName: urn
            AttributeType: S
        KeySchema:
          - AttributeName: urn
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html
    cognitoCommunionUsersDemo:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: communion-users-demo-${sls:stage}
        UsernameAttributes:
          - email
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        AutoVerifiedAttributes:
          - email
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        Schema:
          - AttributeDataType: 'String'
            Name: 'family_name'
            Mutable: true
            Required: true
          - AttributeDataType: 'String'
            Name: 'given_name'
            Mutable: true
            Required: true
          - AttributeDataType: 'String'
            Name: 'organization'
            Mutable: true
        UsernameConfiguration:
          CaseSensitive: false
